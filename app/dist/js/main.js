"use strict";var footballData=angular.module("footballData",["ngResource","ngRoute","ngMaterial"]),apiKey="a7b54dff3a364e4db2f8bde4c7bbff0c";footballData.config(["$mdThemingProvider",function(e){e.theme("default").primaryPalette("blue").accentPalette("orange")}]),footballData.config(["$routeProvider","$locationProvider",function(e,t){e.when("/",{templateUrl:"templates/SiteHome.html",controller:"SiteHomeController"}),e.when("/season/:seasonId",{title:"Season",templateUrl:"templates/Season.html",controller:"SeasonController"}),e.when("/players/:teamId",{title:"Players",templateUrl:"templates/Players.html",controller:"PlayersController"}),e.otherwise({redirectTo:"/"})}]),footballData.controller("MainMenuController",["$scope","$location",function(e,t){}]),footballData.controller("PageAttributesController",["$scope","pageAttributes",function(e,t){e.pageAttributes=t}]),footballData.controller("PlayersController",["$scope","$location","teamDetails","$routeParams","$route","pageAttributes",function(e,t,a,o,r,n){var l=r.current.pathParams.teamId;e.team=a.getTeam(l),e.players=a.getPlayers(l),e.pageAttributes=n,n.setTitle("Players | Football Data Angular")}]),footballData.controller("SeasonController",["$scope","$location","listSeasons","seasonDetails","$routeParams","$route","pageAttributes",function(e,t,a,o,r,n,l){var s=n.current.pathParams.seasonId;e.singleSeason=a.getSeason(s),e.teams=o.getTeams(s),e.fixtures=o.getFixtures(s),e.leagueTable=o.getLeagueTable(s),e.pageAttributes=l,l.setTitle("Season | Football Data Angular")}]),footballData.controller("SiteHomeController",["$scope","$location","listSeasons","pageAttributes",function(e,t,a,o){e.yearsAvailable=[{id:1,name:"2013"},{id:2,name:"2014"},{id:3,name:"2015"},{id:4,name:"2016"}],e.selectedYear={id:3,name:"2015"},e.switchYear=function(){e.seasons=a.getAllSeasons(e.selectedYear.name)},e.seasons=a.getAllSeasons(e.selectedYear.name),e.pageAttributes=o,o.setTitle("Football Data Angular")}]),footballData.filter("orderObjectBy",function(){return function(e,t,a){var o=[];return angular.forEach(e,function(e){o.push(e)}),o.sort(function(e,a){return e[t]>a[t]?1:-1}),a&&o.reverse(),o}}),footballData.filter("teamIdFromUrl",function(){return function(e){var t=e.match(/\/([^\/]*)$/)[1];return t}}),footballData.filter("toArray",function(){return function(e,t){return angular.isObject(e)?t===!1?Object.keys(e).map(function(t){return e[t]}):Object.keys(e).map(function(t){var a=e[t];return angular.isObject(a)?Object.defineProperty(a,"$key",{enumerable:!1,value:t}):{$key:t,$value:a}}):e}}),footballData.factory("listSeasons",["$resource","$http",function(e,t){t.defaults.headers.common["X-Auth-Token"]=apiKey;var a=e("http://api.football-data.org/v1/soccerseasons/:singleSeason",{singleSeason:"@singleSeason"},{query:{method:"GET",cache:!0,isArray:!0},get:{method:"GET",isArray:!1,cache:!0}});return{getSeason:function(e){return a.get({singleSeason:e})},getAllSeasons:function(e){return a.query({season:e})}}}]),footballData.factory("pageAttributes",function(){var e="Football Data Angular";return{title:function(){return e},setTitle:function(t){e=t}}}),footballData.factory("seasonDetails",["$resource","$http",function(e,t){t.defaults.headers.common["X-Auth-Token"]=apiKey;var a=e("http://api.football-data.org/v1/soccerseasons/:singleSeason",{singleSeason:"@singleSeason"},{getTeams:{method:"GET",cache:!0,isArray:!1,url:"http://api.football-data.org/v1/soccerseasons/:singleSeason/teams"},getFixtures:{method:"GET",isArray:!1,cache:!0,url:"http://api.football-data.org/v1/soccerseasons/:singleSeason/fixtures"},getLeagueTable:{method:"GET",isArray:!1,cache:!0,url:"http://api.football-data.org/v1/soccerseasons/:singleSeason/leagueTable"}});return{getTeams:function(e){return a.getTeams({singleSeason:e})},getFixtures:function(e){return a.getFixtures({singleSeason:e})},getLeagueTable:function(e){return a.getLeagueTable({singleSeason:e})}}}]),footballData.factory("teamDetails",["$resource","$http",function(e,t){t.defaults.headers.common["X-Auth-Token"]=apiKey;var a=e("http://api.football-data.org/v1/teams/:teamId",{teamId:"@teamId"},{getTeam:{method:"GET",cache:!0,isArray:!1},getPlayers:{method:"GET",cache:!0,isArray:!1,url:"http://api.football-data.org/v1/teams/:teamId/players"},getFixtures:{method:"GET",isArray:!1,cache:!0,url:"http://api.football-data.org/v1/soccerseasons/:teamId/fixtures"}});return{getPlayers:function(e){return a.getPlayers({teamId:e})},getTeam:function(e){return a.getTeam({teamId:e})},getFixtures:function(e){return a.getFixtures({teamId:e})}}}]);
//# sourceMappingURL=data:application/json;base64,
