"use strict";var footballData=angular.module("footballData",["ngResource","ngRoute","ngMaterial"]),apiKey="a7b54dff3a364e4db2f8bde4c7bbff0c";footballData.config(["$mdThemingProvider",function(e){e.theme("default").primaryPalette("blue").accentPalette("orange")}]),footballData.config(["$routeProvider","$locationProvider",function(e,t){e.when("/",{templateUrl:"templates/SiteHome.html",controller:"SiteHomeController"}),e.when("/season/:seasonId",{title:"Season",templateUrl:"templates/Season.html",controller:"SeasonController"}),e.when("/players/:teamId",{title:"Players",templateUrl:"templates/Players.html",controller:"PlayersController"}),e.otherwise({redirectTo:"/"})}]),footballData.controller("MainMenuController",["$scope","$location",function(e,t){}]),footballData.controller("PageAttributesController",["$scope","pageAttributes",function(e,t){e.pageAttributes=t}]),footballData.controller("PlayersController",["$scope","$location","teamDetails","$routeParams","$route","pageAttributes",function(e,t,a,o,r,n){var l=r.current.pathParams.teamId;e.team=a.getTeam(l),e.players=a.getPlayers(l),e.pageAttributes=n,n.setTitle("Players | Football Data Angular")}]),footballData.controller("SeasonController",["$scope","$location","listSeasons","seasonDetails","$routeParams","$route","pageAttributes",function(e,t,a,o,r,n,l){var s=n.current.pathParams.seasonId;e.singleSeason=a.getSeason(s),e.teams=o.getTeams(s),e.fixtures=o.getFixtures(s),e.leagueTable=o.getLeagueTable(s),e.pageAttributes=l,l.setTitle("Season | Football Data Angular")}]),footballData.controller("SiteHomeController",["$scope","$location","listSeasons","pageAttributes",function(e,t,a,o){e.yearsAvailable=[{id:1,name:"2013"},{id:2,name:"2014"},{id:3,name:"2015"},{id:4,name:"2016"}],e.selectedYear={id:3,name:"2015"},e.switchYear=function(){e.seasons=a.getAllSeasons(e.selectedYear.name)},e.seasons=a.getAllSeasons(e.selectedYear.name),e.pageAttributes=o,o.setTitle("Football Data Angular")}]),footballData.filter("orderObjectBy",function(){return function(e,t,a){var o=[];return angular.forEach(e,function(e){o.push(e)}),o.sort(function(e,a){return e[t]>a[t]?1:-1}),a&&o.reverse(),o}}),footballData.filter("teamIdFromUrl",function(){return function(e){var t=e.match(/\/([^\/]*)$/)[1];return t}}),footballData.filter("toArray",function(){return function(e,t){return angular.isObject(e)?t===!1?Object.keys(e).map(function(t){return e[t]}):Object.keys(e).map(function(t){var a=e[t];return angular.isObject(a)?Object.defineProperty(a,"$key",{enumerable:!1,value:t}):{$key:t,$value:a}}):e}}),footballData.factory("listSeasons",["$resource","$http",function(e,t){t.defaults.headers.common["X-Auth-Token"]=apiKey;var a=e("http://api.football-data.org/v1/soccerseasons/:singleSeason",{singleSeason:"@singleSeason"},{query:{method:"GET",cache:!0,isArray:!0},get:{method:"GET",isArray:!1,cache:!0}});return{getSeason:function(e){return a.get({singleSeason:e})},getAllSeasons:function(e){return a.query({season:e})}}}]),footballData.factory("pageAttributes",function(){var e="Football Data Angular";return{title:function(){return e},setTitle:function(t){e=t}}}),footballData.factory("seasonDetails",["$resource","$http",function(e,t){t.defaults.headers.common["X-Auth-Token"]=apiKey;var a=e("http://api.football-data.org/v1/soccerseasons/:singleSeason",{singleSeason:"@singleSeason"},{getTeams:{method:"GET",cache:!0,isArray:!1,url:"http://api.football-data.org/v1/soccerseasons/:singleSeason/teams"},getFixtures:{method:"GET",isArray:!1,cache:!0,url:"http://api.football-data.org/v1/soccerseasons/:singleSeason/fixtures"},getLeagueTable:{method:"GET",isArray:!1,cache:!0,url:"http://api.football-data.org/v1/soccerseasons/:singleSeason/leagueTable"}});return{getTeams:function(e){return a.getTeams({singleSeason:e})},getFixtures:function(e){return a.getFixtures({singleSeason:e})},getLeagueTable:function(e){return a.getLeagueTable({singleSeason:e})}}}]),footballData.factory("teamDetails",["$resource","$http",function(e,t){t.defaults.headers.common["X-Auth-Token"]=apiKey;var a=e("http://api.football-data.org/v1/teams/:teamId",{teamId:"@teamId"},{getTeam:{method:"GET",cache:!0,isArray:!1},getPlayers:{method:"GET",cache:!0,isArray:!1,url:"http://api.football-data.org/v1/teams/:teamId/players"},getFixtures:{method:"GET",isArray:!1,cache:!0,url:"http://api.football-data.org/v1/soccerseasons/:teamId/fixtures"}});return{getPlayers:function(e){return a.getPlayers({teamId:e})},getTeam:function(e){return a.getTeam({teamId:e})},getFixtures:function(e){return a.getFixtures({teamId:e})}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbmZpZy9hcGlLZXkuanMiLCJjb25maWcvY29sb3Vycy5qcyIsImNvbmZpZy9yb3V0ZXMuanMiLCJjb250cm9sbGVycy9NYWluTWVudUNvbnRyb2xsZXIuanMiLCJhcHAvZGlzdC9qcy9tYWluLmpzIiwiY29udHJvbGxlcnMvUGFnZUF0dHJpYnV0ZXNDb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvUGxheWVyc0NvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9TZWFzb25Db250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvU2l0ZUhvbWVDb250cm9sbGVyLmpzIiwiZmlsdGVycy9vcmRlck9iamVjdEJ5LmpzIiwiZmlsdGVycy90ZWFtSWQuanMiLCJmaWx0ZXJzL3RvQXJyYXkuanMiLCJzZXJ2aWNlcy9MaXN0U2Vhc29ucy5qcyIsInNlcnZpY2VzL1BhZ2VBdHRyaWJ1dGVzLmpzIiwic2VydmljZXMvU2Vhc29uRGV0YWlscy5qcyIsInNlcnZpY2VzL3RlYW1EZXRhaWxzLmpzIl0sIm5hbWVzIjpbImZvb3RiYWxsRGF0YSIsImFuZ3VsYXIiLCJtb2R1bGUiLCJhcGlLZXkiLCJjb25maWciLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCJ0aGVtZSIsInByaW1hcnlQYWxldHRlIiwiYWNjZW50UGFsZXR0ZSIsIiRyb3V0ZVByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwidGl0bGUiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiJHNjb3BlIiwiJGxvY2F0aW9uIiwicGFnZUF0dHJpYnV0ZXMiLCJ0ZWFtRGV0YWlscyIsIiRyb3V0ZVBhcmFtcyIsIiRyb3V0ZSIsInRlYW1JZCIsImN1cnJlbnQiLCJwYXRoUGFyYW1zIiwidGVhbSIsImdldFRlYW0iLCJwbGF5ZXJzIiwiZ2V0UGxheWVycyIsInNldFRpdGxlIiwibGlzdFNlYXNvbnMiLCJzZWFzb25EZXRhaWxzIiwic2Vhc29uSWQiLCJzaW5nbGVTZWFzb24iLCJnZXRTZWFzb24iLCJ0ZWFtcyIsImdldFRlYW1zIiwiZml4dHVyZXMiLCJnZXRGaXh0dXJlcyIsImxlYWd1ZVRhYmxlIiwiZ2V0TGVhZ3VlVGFibGUiLCJ5ZWFyc0F2YWlsYWJsZSIsImlkIiwibmFtZSIsInNlbGVjdGVkWWVhciIsInN3aXRjaFllYXIiLCJzZWFzb25zIiwiZ2V0QWxsU2Vhc29ucyIsImZpbHRlciIsIml0ZW1zIiwiZmllbGQiLCJyZXZlcnNlIiwiZmlsdGVyZWQiLCJmb3JFYWNoIiwiaXRlbSIsInB1c2giLCJzb3J0IiwiYSIsImIiLCJ0ZWFtVXJsIiwibWF0Y2giLCJvYmoiLCJhZGRLZXkiLCJpc09iamVjdCIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJrZXkiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIiRrZXkiLCIkdmFsdWUiLCJmYWN0b3J5IiwiJHJlc291cmNlIiwiJGh0dHAiLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJyZXNvdXJjZSIsInF1ZXJ5IiwibWV0aG9kIiwiY2FjaGUiLCJpc0FycmF5IiwiZ2V0Iiwic2Vhc29uWWVhciIsInNlYXNvbiIsIm5ld1RpdGxlIiwidXJsIl0sIm1hcHBpbmdzIjoiQUFDQSxZQUVBLElBQUFBLGNBQUFDLFFBQUFDLE9BQUEsZ0JBQUEsYUFBQSxVQUFBLGVDREFDLE9BQUEsa0NDQUFILGNBQUFJLFFBQUEscUJBQUEsU0FBQUMsR0FDQUEsRUFBQUMsTUFBQSxXQUNBQyxlQUFBLFFBQ0FDLGNBQUEsYUNIQVIsYUFBQUksUUFBQSxpQkFBQSxvQkFBQSxTQUFBSyxFQUFBQyxHQUNBRCxFQUFBRSxLQUFBLEtBRUFDLFlBQUEsMEJBQ0FDLFdBQUEsdUJBRUFKLEVBQUFFLEtBQUEscUJBRUFHLE1BQUEsU0FDQUYsWUFBQSx3QkFDQUMsV0FBQSxxQkFFQUosRUFBQUUsS0FBQSxvQkFFQUcsTUFBQSxVQUNBRixZQUFBLHlCQUNBQyxXQUFBLHNCQUdBSixFQUFBTSxXQUFBQyxXQUFB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QUFBLG1FQUlBLFFBQ0E1RCxXQUFBLFNBQUFOLEdBQ0EsTUFBQXlELEdBQUFuRCxZQUFBTixPQUFBQSxLQUVBSSxRQUFBLFNBQUFKLEdBQ0EsTUFBQXlELEdBQUFyRCxTQUFBSixPQUFBQSxLQUVBZ0IsWUFBQSxTQUFBaEIsR0FDQSxNQUFBeUQsR0FBQXpDLGFBQUFoQixPQUFBQSIsImZpbGUiOiJhcHAvZGlzdC9qcy9tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoganNoaW50IC1XMDk3ICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBmb290YmFsbERhdGEgPSBhbmd1bGFyLm1vZHVsZSgnZm9vdGJhbGxEYXRhJywgWyduZ1Jlc291cmNlJywgJ25nUm91dGUnLCAnbmdNYXRlcmlhbCddKTsiLCIvLyBSRVBMQUNFIFdJVEggWU9VUiBBUEkgS0VZXG5cbnZhciBhcGlLZXkgPSAnYTdiNTRkZmYzYTM2NGU0ZGIyZjhiZGU0YzdiYmZmMGMnOyIsIid1c2Ugc3RyaWN0JztcblxuZm9vdGJhbGxEYXRhLmNvbmZpZyhmdW5jdGlvbigkbWRUaGVtaW5nUHJvdmlkZXIpIHtcbiAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkZWZhdWx0JylcbiAgICAucHJpbWFyeVBhbGV0dGUoJ2JsdWUnKVxuICAgIC5hY2NlbnRQYWxldHRlKCdvcmFuZ2UnKTtcbn0pOyIsIid1c2Ugc3RyaWN0JztcblxuZm9vdGJhbGxEYXRhLmNvbmZpZyhmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcblx0JHJvdXRlUHJvdmlkZXIud2hlbignLycsXG5cdHtcblx0XHR0ZW1wbGF0ZVVybDondGVtcGxhdGVzL1NpdGVIb21lLmh0bWwnLFxuXHRcdGNvbnRyb2xsZXI6ICdTaXRlSG9tZUNvbnRyb2xsZXInXG5cdH0pO1xuXHQkcm91dGVQcm92aWRlci53aGVuKCcvc2Vhc29uLzpzZWFzb25JZCcsXG5cdHtcblx0XHR0aXRsZTogJ1NlYXNvbicsXG5cdFx0dGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvU2Vhc29uLmh0bWwnLFxuXHRcdGNvbnRyb2xsZXI6ICdTZWFzb25Db250cm9sbGVyJ1xuXHR9KTtcblx0JHJvdXRlUHJvdmlkZXIud2hlbignL3BsYXllcnMvOnRlYW1JZCcsXG5cdHtcblx0XHR0aXRsZTogJ1BsYXllcnMnLFxuXHRcdHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL1BsYXllcnMuaHRtbCcsXG5cdFx0Y29udHJvbGxlcjogJ1BsYXllcnNDb250cm9sbGVyJyxcblx0fSk7XG5cblx0JHJvdXRlUHJvdmlkZXIub3RoZXJ3aXNlKHtyZWRpcmVjdFRvOiAnLyd9KTtcblxuXHQvKiBTZXQgdG8gdHJ1ZSBvbmx5IGlmIHVzaW5nIHdlYiBzZXJ2ZXIgdG8gZGlyZWN0IGV2ZXJ5dGhpbmcgdG8gaW5kZXgqL1xuXHQvLyRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcbn0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmZvb3RiYWxsRGF0YS5jb250cm9sbGVyKCdNYWluTWVudUNvbnRyb2xsZXInLFxyXG4gICAgZnVuY3Rpb24gTWFpbk1lbnVDb250cm9sbGVyKCRzY29wZSwgJGxvY2F0aW9uKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2Fic1VybDonLCAkbG9jYXRpb24uYWJzVXJsKCkpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdwcm90b2NvbDonLCAkbG9jYXRpb24ucHJvdG9jb2woKSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3BvcnQ6JywgJGxvY2F0aW9uLnBvcnQoKSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2hvc3Q6JywgJGxvY2F0aW9uLmhvc3QoKSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3BhdGg6JywgJGxvY2F0aW9uLnBhdGgoKSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3NlYXJjaDonLCAkbG9jYXRpb24uc2VhcmNoKCkpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdoYXNoOicsICRsb2NhdGlvbi5oYXNoKCkpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd1cmw6JywgJGxvY2F0aW9uLnVybCgpKTtcclxuICAgIH0pOyIsIi8qIGpzaGludCAtVzA5NyAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9vdGJhbGxEYXRhID0gYW5ndWxhci5tb2R1bGUoJ2Zvb3RiYWxsRGF0YScsIFsnbmdSZXNvdXJjZScsICduZ1JvdXRlJywgJ25nTWF0ZXJpYWwnXSk7XG4vLyBSRVBMQUNFIFdJVEggWU9VUiBBUEkgS0VZXG5cbnZhciBhcGlLZXkgPSAnYTdiNTRkZmYzYTM2NGU0ZGIyZjhiZGU0YzdiYmZmMGMnO1xuJ3VzZSBzdHJpY3QnO1xuXG5mb290YmFsbERhdGEuY29uZmlnKFtcIiRtZFRoZW1pbmdQcm92aWRlclwiLCBmdW5jdGlvbigkbWRUaGVtaW5nUHJvdmlkZXIpIHtcbiAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkZWZhdWx0JylcbiAgICAucHJpbWFyeVBhbGV0dGUoJ2JsdWUnKVxuICAgIC5hY2NlbnRQYWxldHRlKCdvcmFuZ2UnKTtcbn1dKTtcbid1c2Ugc3RyaWN0JztcblxuZm9vdGJhbGxEYXRhLmNvbmZpZyhbXCIkcm91dGVQcm92aWRlclwiLCBcIiRsb2NhdGlvblByb3ZpZGVyXCIsIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xuXHQkcm91dGVQcm92aWRlci53aGVuKCcvJyxcblx0e1xuXHRcdHRlbXBsYXRlVXJsOid0ZW1wbGF0ZXMvU2l0ZUhvbWUuaHRtbCcsXG5cdFx0Y29udHJvbGxlcjogJ1NpdGVIb21lQ29udHJvbGxlcidcblx0fSk7XG5cdCRyb3V0ZVByb3ZpZGVyLndoZW4oJy9zZWFzb24vOnNlYXNvbklkJyxcblx0e1xuXHRcdHRpdGxlOiAnU2Vhc29uJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy9TZWFzb24uaHRtbCcsXG5cdFx0Y29udHJvbGxlcjogJ1NlYXNvbkNvbnRyb2xsZXInXG5cdH0pO1xuXHQkcm91dGVQcm92aWRlci53aGVuKCcvcGxheWVycy86dGVhbUlkJyxcblx0e1xuXHRcdHRpdGxlOiAnUGxheWVycycsXG5cdFx0dGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvUGxheWVycy5odG1sJyxcblx0XHRjb250cm9sbGVyOiAnUGxheWVyc0NvbnRyb2xsZXInLFxuXHR9KTtcblxuXHQkcm91dGVQcm92aWRlci5vdGhlcndpc2Uoe3JlZGlyZWN0VG86ICcvJ30pO1xuXG5cdC8qIFNldCB0byB0cnVlIG9ubHkgaWYgdXNpbmcgd2ViIHNlcnZlciB0byBkaXJlY3QgZXZlcnl0aGluZyB0byBpbmRleCovXG5cdC8vJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xufV0pO1xuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZm9vdGJhbGxEYXRhLmNvbnRyb2xsZXIoJ01haW5NZW51Q29udHJvbGxlcicsXHJcbiAgICBbXCIkc2NvcGVcIiwgXCIkbG9jYXRpb25cIiwgZnVuY3Rpb24gTWFpbk1lbnVDb250cm9sbGVyKCRzY29wZSwgJGxvY2F0aW9uKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2Fic1VybDonLCAkbG9jYXRpb24uYWJzVXJsKCkpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdwcm90b2NvbDonLCAkbG9jYXRpb24ucHJvdG9jb2woKSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3BvcnQ6JywgJGxvY2F0aW9uLnBvcnQoKSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2hvc3Q6JywgJGxvY2F0aW9uLmhvc3QoKSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3BhdGg6JywgJGxvY2F0aW9uLnBhdGgoKSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3NlYXJjaDonLCAkbG9jYXRpb24uc2VhcmNoKCkpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdoYXNoOicsICRsb2NhdGlvbi5oYXNoKCkpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd1cmw6JywgJGxvY2F0aW9uLnVybCgpKTtcclxuICAgIH1dKTtcbid1c2Ugc3RyaWN0JztcblxuZm9vdGJhbGxEYXRhLmNvbnRyb2xsZXIoJ1BhZ2VBdHRyaWJ1dGVzQ29udHJvbGxlcicsXG4gICAgW1wiJHNjb3BlXCIsIFwicGFnZUF0dHJpYnV0ZXNcIiwgZnVuY3Rpb24gUGxheWVyc0NvbnRyb2xsZXIoJHNjb3BlLCBwYWdlQXR0cmlidXRlcykge1xuICAgIFx0JHNjb3BlLnBhZ2VBdHRyaWJ1dGVzID0gcGFnZUF0dHJpYnV0ZXM7XG4gICAgfV1cbik7XG4ndXNlIHN0cmljdCc7XG5cbmZvb3RiYWxsRGF0YS5jb250cm9sbGVyKCdQbGF5ZXJzQ29udHJvbGxlcicsXG4gICAgW1wiJHNjb3BlXCIsIFwiJGxvY2F0aW9uXCIsIFwidGVhbURldGFpbHNcIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkcm91dGVcIiwgXCJwYWdlQXR0cmlidXRlc1wiLCBmdW5jdGlvbiBQbGF5ZXJzQ29udHJvbGxlcigkc2NvcGUsICRsb2NhdGlvbiwgdGVhbURldGFpbHMsICRyb3V0ZVBhcmFtcywgJHJvdXRlLCBwYWdlQXR0cmlidXRlcykge1xuICAgIFx0dmFyIHRlYW1JZCA9ICRyb3V0ZS5jdXJyZW50LnBhdGhQYXJhbXMudGVhbUlkO1xuICAgIFx0JHNjb3BlLnRlYW0gPSB0ZWFtRGV0YWlscy5nZXRUZWFtKHRlYW1JZCk7XG4gICAgICAgICRzY29wZS5wbGF5ZXJzID0gdGVhbURldGFpbHMuZ2V0UGxheWVycyh0ZWFtSWQpO1xuXG4gICAgXHQkc2NvcGUucGFnZUF0dHJpYnV0ZXMgPSBwYWdlQXR0cmlidXRlcztcbiAgICBcdHBhZ2VBdHRyaWJ1dGVzLnNldFRpdGxlKCdQbGF5ZXJzIHwgRm9vdGJhbGwgRGF0YSBBbmd1bGFyJyk7XG4gICAgfV1cbik7XG4ndXNlIHN0cmljdCc7XG5cbmZvb3RiYWxsRGF0YS5jb250cm9sbGVyKCdTZWFzb25Db250cm9sbGVyJyxcbiAgICBbXCIkc2NvcGVcIiwgXCIkbG9jYXRpb25cIiwgXCJsaXN0U2Vhc29uc1wiLCBcInNlYXNvbkRldGFpbHNcIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkcm91dGVcIiwgXCJwYWdlQXR0cmlidXRlc1wiLCBmdW5jdGlvbiBTZWFzb25Db250cm9sbGVyKCRzY29wZSwgJGxvY2F0aW9uLCBsaXN0U2Vhc29ucywgc2Vhc29uRGV0YWlscywgJHJvdXRlUGFyYW1zLCAkcm91dGUsIHBhZ2VBdHRyaWJ1dGVzKSB7XG4gICAgXHR2YXIgc2Vhc29uSWQgPSAkcm91dGUuY3VycmVudC5wYXRoUGFyYW1zLnNlYXNvbklkO1xuICAgICAgICAkc2NvcGUuc2luZ2xlU2Vhc29uID0gbGlzdFNlYXNvbnMuZ2V0U2Vhc29uKHNlYXNvbklkKTtcbiAgICAgICAgJHNjb3BlLnRlYW1zID0gc2Vhc29uRGV0YWlscy5nZXRUZWFtcyhzZWFzb25JZCk7XG4gICAgICAgICRzY29wZS5maXh0dXJlcyA9IHNlYXNvbkRldGFpbHMuZ2V0Rml4dHVyZXMoc2Vhc29uSWQpO1xuICAgICAgICAkc2NvcGUubGVhZ3VlVGFibGUgPSBzZWFzb25EZXRhaWxzLmdldExlYWd1ZVRhYmxlKHNlYXNvbklkKTtcblxuICAgICAgICAkc2NvcGUucGFnZUF0dHJpYnV0ZXMgPSBwYWdlQXR0cmlidXRlcztcbiAgICBcdHBhZ2VBdHRyaWJ1dGVzLnNldFRpdGxlKCdTZWFzb24gfCBGb290YmFsbCBEYXRhIEFuZ3VsYXInKTtcbiAgICB9XVxuKTtcbid1c2Ugc3RyaWN0JztcblxuZm9vdGJhbGxEYXRhLmNvbnRyb2xsZXIoJ1NpdGVIb21lQ29udHJvbGxlcicsXG4gICAgW1wiJHNjb3BlXCIsIFwiJGxvY2F0aW9uXCIsIFwibGlzdFNlYXNvbnNcIiwgXCJwYWdlQXR0cmlidXRlc1wiLCBmdW5jdGlvbiBTaXRlSG9tZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9jYXRpb24sIGxpc3RTZWFzb25zLCBwYWdlQXR0cmlidXRlcykge1xuXG4gICAgXHQkc2NvcGUueWVhcnNBdmFpbGFibGUgPSBbXG4gICAgXHRcdFx0e2lkIDogMSwgbmFtZTogJzIwMTMnfSxcblx0ICAgIFx0XHR7aWQgOiAyLCBuYW1lOiAnMjAxNCd9LFxuXHQgICAgXHRcdHtpZCA6IDMsIG5hbWU6ICcyMDE1J30sXG5cdCAgICBcdFx0e2lkIDogNCwgbmFtZTogJzIwMTYnfVxuICAgIFx0XTtcbiAgICBcdCRzY29wZS5zZWxlY3RlZFllYXIgPSB7aWQgOiAzLCBuYW1lOiAnMjAxNSd9O1xuXG4gICAgXHQkc2NvcGUuc3dpdGNoWWVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICBcdFx0JHNjb3BlLnNlYXNvbnMgPSBsaXN0U2Vhc29ucy5nZXRBbGxTZWFzb25zKCRzY29wZS5zZWxlY3RlZFllYXIubmFtZSk7XG4gICAgXHR9O1xuXG4gICAgICAgICRzY29wZS5zZWFzb25zID0gbGlzdFNlYXNvbnMuZ2V0QWxsU2Vhc29ucygkc2NvcGUuc2VsZWN0ZWRZZWFyLm5hbWUpO1xuXG4gICAgICAgICRzY29wZS5wYWdlQXR0cmlidXRlcyA9IHBhZ2VBdHRyaWJ1dGVzO1xuICAgICAgICBwYWdlQXR0cmlidXRlcy5zZXRUaXRsZSgnRm9vdGJhbGwgRGF0YSBBbmd1bGFyJyk7XG4gICAgfV1cbik7XG4vKipcbiAqIG9yZGVyT2JqZWN0QnkgZmlsdGVyXG4gKiBmcm9tIDogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjcwNzA0MTRcbiAqIEBwYXJhbSAge0FycmF5fSAgKSB7ICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihpdGVtcywgZmllbGQsIHJldmVyc2UpIHsgICAgdmFyIGZpbHRlcmVkIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge1t0eXBlXX0gICBbZGVzY3JpcHRpb25dXG4gKi9cbmZvb3RiYWxsRGF0YS5maWx0ZXIoJ29yZGVyT2JqZWN0QnknLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGl0ZW1zLCBmaWVsZCwgcmV2ZXJzZSkge1xuICAgIHZhciBmaWx0ZXJlZCA9IFtdO1xuICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtcywgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgZmlsdGVyZWQucHVzaChpdGVtKTtcbiAgICB9KTtcbiAgICBmaWx0ZXJlZC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gKGFbZmllbGRdID4gYltmaWVsZF0gPyAxIDogLTEpO1xuICAgIH0pO1xuICAgIGlmKHJldmVyc2UpIGZpbHRlcmVkLnJldmVyc2UoKTtcbiAgICByZXR1cm4gZmlsdGVyZWQ7XG4gIH07XG59KTtcbid1c2Ugc3RyaWN0JztcblxuZm9vdGJhbGxEYXRhLmZpbHRlcigndGVhbUlkRnJvbVVybCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24odGVhbVVybCkge1xuICAgIHZhciBpZCA9IHRlYW1VcmwubWF0Y2goL1xcLyhbXi9dKikkLylbMV07XG4gICAgcmV0dXJuIGlkO1xuICB9O1xufSk7XG4vKipcbiAqIEFuZ3VsYXJKUyB0b0FycmF5IEZpbHRlclxuICogZnJvbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9wZXRlYmFjb25kYXJ3aW4vYW5ndWxhci10b0FycmF5RmlsdGVyXG4gKiBAcGFyYW0gIHtbdHlwZV19ICkgeyAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgYWRkS2V5KSB7ICAgIGlmICghYW5ndWxhci5pc09iamVjdChvYmopKSByZXR1cm4gb2JqOyAgICBpZiAoIGFkZEtleSBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtbdHlwZV19ICAgW2Rlc2NyaXB0aW9uXVxuICovXG5mb290YmFsbERhdGEuZmlsdGVyKCd0b0FycmF5JywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgYWRkS2V5KSB7XG4gICAgaWYgKCFhbmd1bGFyLmlzT2JqZWN0KG9iaikpIHJldHVybiBvYmo7XG4gICAgaWYgKCBhZGRLZXkgPT09IGZhbHNlICkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gb2JqW2tleV07XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgIHJldHVybiBhbmd1bGFyLmlzT2JqZWN0KHZhbHVlKSA/XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlLCAnJGtleScsIHsgZW51bWVyYWJsZTogZmFsc2UsIHZhbHVlOiBrZXl9KSA6XG4gICAgICAgICAgeyAka2V5OiBrZXksICR2YWx1ZTogdmFsdWUgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pO1xuZm9vdGJhbGxEYXRhLmZhY3RvcnkoJ2xpc3RTZWFzb25zJywgW1wiJHJlc291cmNlXCIsIFwiJGh0dHBcIiwgZnVuY3Rpb24oJHJlc291cmNlLCAkaHR0cCkge1xuICAgIC8qKlxuICAgICAqIGh0dHA6Ly9hcGkuZm9vdGJhbGwtZGF0YS5vcmcvdjEvIHJlc291cmNlXG4gICAgICogZWFybGllc3Qgc2Vhc29uIGlzIDIwMTMvMTQsIHVwIHRvIGN1cnJlbnQgc2Vhc29uXG4gICAgICogKCArIDIwMTYvMTcgaGFzIEV1cm9wZWFuIENoYW1waW9uc2hpcHMgKVxuICAgICAqL1xuICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgtVG9rZW4nXSA9IGFwaUtleTtcbiAgICB2YXIgcmVzb3VyY2UgPSAkcmVzb3VyY2UoJ2h0dHA6Ly9hcGkuZm9vdGJhbGwtZGF0YS5vcmcvdjEvc29jY2Vyc2Vhc29ucy86c2luZ2xlU2Vhc29uJyxcbiAgICAgICAge3NpbmdsZVNlYXNvbjonQHNpbmdsZVNlYXNvbid9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicXVlcnlcIjoge21ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQXJyYXk6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcImdldFwiOiB7bWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNBcnJheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZSA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldFNlYXNvbjogZnVuY3Rpb24oc2Vhc29uSWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvdXJjZS5nZXQoe3NpbmdsZVNlYXNvbjpzZWFzb25JZH0pO1xuICAgICAgICB9LFxuICAgICAgICBnZXRBbGxTZWFzb25zOiBmdW5jdGlvbihzZWFzb25ZZWFyKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb3VyY2UucXVlcnkoe3NlYXNvbjogc2Vhc29uWWVhcn0pO1xuICAgICAgICB9XG4gICAgfTtcbn1dKTtcblxuZm9vdGJhbGxEYXRhLmZhY3RvcnkoJ3BhZ2VBdHRyaWJ1dGVzJywgZnVuY3Rpb24oKXtcbiAgdmFyIHRpdGxlID0gJ0Zvb3RiYWxsIERhdGEgQW5ndWxhcic7XG4gIHJldHVybiB7XG4gICAgdGl0bGU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGl0bGU7IH0sXG4gICAgc2V0VGl0bGU6IGZ1bmN0aW9uKG5ld1RpdGxlKSB7IHRpdGxlID0gbmV3VGl0bGU7IH1cbiAgfTtcbn0pO1xuZm9vdGJhbGxEYXRhLmZhY3RvcnkoJ3NlYXNvbkRldGFpbHMnLCBbXCIkcmVzb3VyY2VcIiwgXCIkaHR0cFwiLCBmdW5jdGlvbigkcmVzb3VyY2UsICRodHRwKSB7XG4gICAgLyoqXG4gICAgICogaHR0cDovL2FwaS5mb290YmFsbC1kYXRhLm9yZy92MS8gcmVzb3VyY2VcbiAgICAgKiBnZXQgZGV0YWlscyBvZiBhIHNpbmdsZSBzZWFzb25cbiAgICAgKi9cbiAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoLVRva2VuJ10gPSBhcGlLZXk7XG4gICAgdmFyIHJlc291cmNlID0gJHJlc291cmNlKCdodHRwOi8vYXBpLmZvb3RiYWxsLWRhdGEub3JnL3YxL3NvY2NlcnNlYXNvbnMvOnNpbmdsZVNlYXNvbicsXG4gICAgICAgIHtzaW5nbGVTZWFzb246J0BzaW5nbGVTZWFzb24nfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImdldFRlYW1zXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQXJyYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaHR0cDovL2FwaS5mb290YmFsbC1kYXRhLm9yZy92MS9zb2NjZXJzZWFzb25zLzpzaW5nbGVTZWFzb24vdGVhbXMnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJnZXRGaXh0dXJlc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FycmF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2h0dHA6Ly9hcGkuZm9vdGJhbGwtZGF0YS5vcmcvdjEvc29jY2Vyc2Vhc29ucy86c2luZ2xlU2Vhc29uL2ZpeHR1cmVzJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJnZXRMZWFndWVUYWJsZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FycmF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2h0dHA6Ly9hcGkuZm9vdGJhbGwtZGF0YS5vcmcvdjEvc29jY2Vyc2Vhc29ucy86c2luZ2xlU2Vhc29uL2xlYWd1ZVRhYmxlJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXRUZWFtczogZnVuY3Rpb24oc2Vhc29uSWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvdXJjZS5nZXRUZWFtcyh7c2luZ2xlU2Vhc29uOnNlYXNvbklkfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEZpeHR1cmVzOiBmdW5jdGlvbihzZWFzb25JZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlLmdldEZpeHR1cmVzKHtzaW5nbGVTZWFzb246c2Vhc29uSWR9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0TGVhZ3VlVGFibGU6IGZ1bmN0aW9uKHNlYXNvbklkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb3VyY2UuZ2V0TGVhZ3VlVGFibGUoe3NpbmdsZVNlYXNvbjpzZWFzb25JZH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1dKTtcbmZvb3RiYWxsRGF0YS5mYWN0b3J5KCd0ZWFtRGV0YWlscycsIFtcIiRyZXNvdXJjZVwiLCBcIiRodHRwXCIsIGZ1bmN0aW9uKCRyZXNvdXJjZSwgJGh0dHApIHtcbiAgICAvKipcbiAgICAgKiBodHRwOi8vYXBpLmZvb3RiYWxsLWRhdGEub3JnL3YxLyByZXNvdXJjZVxuICAgICAqIGdldCBkZXRhaWxzIG9mIGEgc2luZ2xlIHNlYXNvblxuICAgICAqL1xuICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgtVG9rZW4nXSA9IGFwaUtleTtcbiAgICB2YXIgcmVzb3VyY2UgPSAkcmVzb3VyY2UoJ2h0dHA6Ly9hcGkuZm9vdGJhbGwtZGF0YS5vcmcvdjEvdGVhbXMvOnRlYW1JZCcsXG4gICAgICAgIHt0ZWFtSWQ6J0B0ZWFtSWQnfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImdldFRlYW1cIjoge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZSA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FycmF5OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJnZXRQbGF5ZXJzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQXJyYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaHR0cDovL2FwaS5mb290YmFsbC1kYXRhLm9yZy92MS90ZWFtcy86dGVhbUlkL3BsYXllcnMnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJnZXRGaXh0dXJlc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FycmF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2h0dHA6Ly9hcGkuZm9vdGJhbGwtZGF0YS5vcmcvdjEvc29jY2Vyc2Vhc29ucy86dGVhbUlkL2ZpeHR1cmVzJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXRQbGF5ZXJzOiBmdW5jdGlvbih0ZWFtSWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvdXJjZS5nZXRQbGF5ZXJzKHt0ZWFtSWQ6dGVhbUlkfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFRlYW06IGZ1bmN0aW9uKHRlYW1JZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlLmdldFRlYW0oe3RlYW1JZDp0ZWFtSWR9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Rml4dHVyZXM6IGZ1bmN0aW9uKHRlYW1JZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlLmdldEZpeHR1cmVzKHt0ZWFtSWQ6dGVhbUlkfSk7XG4gICAgICAgIH1cbiAgICB9O1xufV0pOyIsIid1c2Ugc3RyaWN0JztcblxuZm9vdGJhbGxEYXRhLmNvbnRyb2xsZXIoJ1BhZ2VBdHRyaWJ1dGVzQ29udHJvbGxlcicsXG4gICAgZnVuY3Rpb24gUGxheWVyc0NvbnRyb2xsZXIoJHNjb3BlLCBwYWdlQXR0cmlidXRlcykge1xuICAgIFx0JHNjb3BlLnBhZ2VBdHRyaWJ1dGVzID0gcGFnZUF0dHJpYnV0ZXM7XG4gICAgfVxuKTsiLCIndXNlIHN0cmljdCc7XG5cbmZvb3RiYWxsRGF0YS5jb250cm9sbGVyKCdQbGF5ZXJzQ29udHJvbGxlcicsXG4gICAgZnVuY3Rpb24gUGxheWVyc0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9jYXRpb24sIHRlYW1EZXRhaWxzLCAkcm91dGVQYXJhbXMsICRyb3V0ZSwgcGFnZUF0dHJpYnV0ZXMpIHtcbiAgICBcdHZhciB0ZWFtSWQgPSAkcm91dGUuY3VycmVudC5wYXRoUGFyYW1zLnRlYW1JZDtcbiAgICBcdCRzY29wZS50ZWFtID0gdGVhbURldGFpbHMuZ2V0VGVhbSh0ZWFtSWQpO1xuICAgICAgICAkc2NvcGUucGxheWVycyA9IHRlYW1EZXRhaWxzLmdldFBsYXllcnModGVhbUlkKTtcblxuICAgIFx0JHNjb3BlLnBhZ2VBdHRyaWJ1dGVzID0gcGFnZUF0dHJpYnV0ZXM7XG4gICAgXHRwYWdlQXR0cmlidXRlcy5zZXRUaXRsZSgnUGxheWVycyB8IEZvb3RiYWxsIERhdGEgQW5ndWxhcicpO1xuICAgIH1cbik7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mb290YmFsbERhdGEuY29udHJvbGxlcignU2Vhc29uQ29udHJvbGxlcicsXG4gICAgZnVuY3Rpb24gU2Vhc29uQ29udHJvbGxlcigkc2NvcGUsICRsb2NhdGlvbiwgbGlzdFNlYXNvbnMsIHNlYXNvbkRldGFpbHMsICRyb3V0ZVBhcmFtcywgJHJvdXRlLCBwYWdlQXR0cmlidXRlcykge1xuICAgIFx0dmFyIHNlYXNvbklkID0gJHJvdXRlLmN1cnJlbnQucGF0aFBhcmFtcy5zZWFzb25JZDtcbiAgICAgICAgJHNjb3BlLnNpbmdsZVNlYXNvbiA9IGxpc3RTZWFzb25zLmdldFNlYXNvbihzZWFzb25JZCk7XG4gICAgICAgICRzY29wZS50ZWFtcyA9IHNlYXNvbkRldGFpbHMuZ2V0VGVhbXMoc2Vhc29uSWQpO1xuICAgICAgICAkc2NvcGUuZml4dHVyZXMgPSBzZWFzb25EZXRhaWxzLmdldEZpeHR1cmVzKHNlYXNvbklkKTtcbiAgICAgICAgJHNjb3BlLmxlYWd1ZVRhYmxlID0gc2Vhc29uRGV0YWlscy5nZXRMZWFndWVUYWJsZShzZWFzb25JZCk7XG5cbiAgICAgICAgJHNjb3BlLnBhZ2VBdHRyaWJ1dGVzID0gcGFnZUF0dHJpYnV0ZXM7XG4gICAgXHRwYWdlQXR0cmlidXRlcy5zZXRUaXRsZSgnU2Vhc29uIHwgRm9vdGJhbGwgRGF0YSBBbmd1bGFyJyk7XG4gICAgfVxuKTsiLCIndXNlIHN0cmljdCc7XG5cbmZvb3RiYWxsRGF0YS5jb250cm9sbGVyKCdTaXRlSG9tZUNvbnRyb2xsZXInLFxuICAgIGZ1bmN0aW9uIFNpdGVIb21lQ29udHJvbGxlcigkc2NvcGUsICRsb2NhdGlvbiwgbGlzdFNlYXNvbnMsIHBhZ2VBdHRyaWJ1dGVzKSB7XG5cbiAgICBcdCRzY29wZS55ZWFyc0F2YWlsYWJsZSA9IFtcbiAgICBcdFx0XHR7aWQgOiAxLCBuYW1lOiAnMjAxMyd9LFxuXHQgICAgXHRcdHtpZCA6IDIsIG5hbWU6ICcyMDE0J30sXG5cdCAgICBcdFx0e2lkIDogMywgbmFtZTogJzIwMTUnfSxcblx0ICAgIFx0XHR7aWQgOiA0LCBuYW1lOiAnMjAxNid9XG4gICAgXHRdO1xuICAgIFx0JHNjb3BlLnNlbGVjdGVkWWVhciA9IHtpZCA6IDMsIG5hbWU6ICcyMDE1J307XG5cbiAgICBcdCRzY29wZS5zd2l0Y2hZZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIFx0XHQkc2NvcGUuc2Vhc29ucyA9IGxpc3RTZWFzb25zLmdldEFsbFNlYXNvbnMoJHNjb3BlLnNlbGVjdGVkWWVhci5uYW1lKTtcbiAgICBcdH07XG5cbiAgICAgICAgJHNjb3BlLnNlYXNvbnMgPSBsaXN0U2Vhc29ucy5nZXRBbGxTZWFzb25zKCRzY29wZS5zZWxlY3RlZFllYXIubmFtZSk7XG5cbiAgICAgICAgJHNjb3BlLnBhZ2VBdHRyaWJ1dGVzID0gcGFnZUF0dHJpYnV0ZXM7XG4gICAgICAgIHBhZ2VBdHRyaWJ1dGVzLnNldFRpdGxlKCdGb290YmFsbCBEYXRhIEFuZ3VsYXInKTtcbiAgICB9XG4pOyIsIi8qKlxuICogb3JkZXJPYmplY3RCeSBmaWx0ZXJcbiAqIGZyb20gOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNzA3MDQxNFxuICogQHBhcmFtICB7QXJyYXl9ICApIHsgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGl0ZW1zLCBmaWVsZCwgcmV2ZXJzZSkgeyAgICB2YXIgZmlsdGVyZWQgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7W3R5cGVdfSAgIFtkZXNjcmlwdGlvbl1cbiAqL1xuZm9vdGJhbGxEYXRhLmZpbHRlcignb3JkZXJPYmplY3RCeScsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24oaXRlbXMsIGZpZWxkLCByZXZlcnNlKSB7XG4gICAgdmFyIGZpbHRlcmVkID0gW107XG4gICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICBmaWx0ZXJlZC5wdXNoKGl0ZW0pO1xuICAgIH0pO1xuICAgIGZpbHRlcmVkLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiAoYVtmaWVsZF0gPiBiW2ZpZWxkXSA/IDEgOiAtMSk7XG4gICAgfSk7XG4gICAgaWYocmV2ZXJzZSkgZmlsdGVyZWQucmV2ZXJzZSgpO1xuICAgIHJldHVybiBmaWx0ZXJlZDtcbiAgfTtcbn0pOyIsIid1c2Ugc3RyaWN0JztcblxuZm9vdGJhbGxEYXRhLmZpbHRlcigndGVhbUlkRnJvbVVybCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24odGVhbVVybCkge1xuICAgIHZhciBpZCA9IHRlYW1VcmwubWF0Y2goL1xcLyhbXi9dKikkLylbMV07XG4gICAgcmV0dXJuIGlkO1xuICB9O1xufSk7IiwiLyoqXG4gKiBBbmd1bGFySlMgdG9BcnJheSBGaWx0ZXJcbiAqIGZyb20gOiBodHRwczovL2dpdGh1Yi5jb20vcGV0ZWJhY29uZGFyd2luL2FuZ3VsYXItdG9BcnJheUZpbHRlclxuICogQHBhcmFtICB7W3R5cGVdfSApIHsgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIGFkZEtleSkgeyAgICBpZiAoIWFuZ3VsYXIuaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajsgICAgaWYgKCBhZGRLZXkgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7W3R5cGVdfSAgIFtkZXNjcmlwdGlvbl1cbiAqL1xuZm9vdGJhbGxEYXRhLmZpbHRlcigndG9BcnJheScsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIGFkZEtleSkge1xuICAgIGlmICghYW5ndWxhci5pc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICAgIGlmICggYWRkS2V5ID09PSBmYWxzZSApIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIG9ialtrZXldO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICByZXR1cm4gYW5ndWxhci5pc09iamVjdCh2YWx1ZSkgP1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJyRrZXknLCB7IGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZToga2V5fSkgOlxuICAgICAgICAgIHsgJGtleToga2V5LCAkdmFsdWU6IHZhbHVlIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KTsiLCJmb290YmFsbERhdGEuZmFjdG9yeSgnbGlzdFNlYXNvbnMnLCBmdW5jdGlvbigkcmVzb3VyY2UsICRodHRwKSB7XG4gICAgLyoqXG4gICAgICogaHR0cDovL2FwaS5mb290YmFsbC1kYXRhLm9yZy92MS8gcmVzb3VyY2VcbiAgICAgKiBlYXJsaWVzdCBzZWFzb24gaXMgMjAxMy8xNCwgdXAgdG8gY3VycmVudCBzZWFzb25cbiAgICAgKiAoICsgMjAxNi8xNyBoYXMgRXVyb3BlYW4gQ2hhbXBpb25zaGlwcyApXG4gICAgICovXG4gICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aC1Ub2tlbiddID0gYXBpS2V5O1xuICAgIHZhciByZXNvdXJjZSA9ICRyZXNvdXJjZSgnaHR0cDovL2FwaS5mb290YmFsbC1kYXRhLm9yZy92MS9zb2NjZXJzZWFzb25zLzpzaW5nbGVTZWFzb24nLFxuICAgICAgICB7c2luZ2xlU2Vhc29uOidAc2luZ2xlU2Vhc29uJ30sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJxdWVyeVwiOiB7bWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNBcnJheTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiZ2V0XCI6IHttZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FycmF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlIDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0U2Vhc29uOiBmdW5jdGlvbihzZWFzb25JZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlLmdldCh7c2luZ2xlU2Vhc29uOnNlYXNvbklkfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEFsbFNlYXNvbnM6IGZ1bmN0aW9uKHNlYXNvblllYXIpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvdXJjZS5xdWVyeSh7c2Vhc29uOiBzZWFzb25ZZWFyfSk7XG4gICAgICAgIH1cbiAgICB9O1xufSk7XG4iLCJmb290YmFsbERhdGEuZmFjdG9yeSgncGFnZUF0dHJpYnV0ZXMnLCBmdW5jdGlvbigpe1xuICB2YXIgdGl0bGUgPSAnRm9vdGJhbGwgRGF0YSBBbmd1bGFyJztcbiAgcmV0dXJuIHtcbiAgICB0aXRsZTogZnVuY3Rpb24oKSB7IHJldHVybiB0aXRsZTsgfSxcbiAgICBzZXRUaXRsZTogZnVuY3Rpb24obmV3VGl0bGUpIHsgdGl0bGUgPSBuZXdUaXRsZTsgfVxuICB9O1xufSk7IiwiZm9vdGJhbGxEYXRhLmZhY3RvcnkoJ3NlYXNvbkRldGFpbHMnLCBmdW5jdGlvbigkcmVzb3VyY2UsICRodHRwKSB7XG4gICAgLyoqXG4gICAgICogaHR0cDovL2FwaS5mb290YmFsbC1kYXRhLm9yZy92MS8gcmVzb3VyY2VcbiAgICAgKiBnZXQgZGV0YWlscyBvZiBhIHNpbmdsZSBzZWFzb25cbiAgICAgKi9cbiAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoLVRva2VuJ10gPSBhcGlLZXk7XG4gICAgdmFyIHJlc291cmNlID0gJHJlc291cmNlKCdodHRwOi8vYXBpLmZvb3RiYWxsLWRhdGEub3JnL3YxL3NvY2NlcnNlYXNvbnMvOnNpbmdsZVNlYXNvbicsXG4gICAgICAgIHtzaW5nbGVTZWFzb246J0BzaW5nbGVTZWFzb24nfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImdldFRlYW1zXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQXJyYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaHR0cDovL2FwaS5mb290YmFsbC1kYXRhLm9yZy92MS9zb2NjZXJzZWFzb25zLzpzaW5nbGVTZWFzb24vdGVhbXMnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJnZXRGaXh0dXJlc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FycmF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2h0dHA6Ly9hcGkuZm9vdGJhbGwtZGF0YS5vcmcvdjEvc29jY2Vyc2Vhc29ucy86c2luZ2xlU2Vhc29uL2ZpeHR1cmVzJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJnZXRMZWFndWVUYWJsZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FycmF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2h0dHA6Ly9hcGkuZm9vdGJhbGwtZGF0YS5vcmcvdjEvc29jY2Vyc2Vhc29ucy86c2luZ2xlU2Vhc29uL2xlYWd1ZVRhYmxlJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXRUZWFtczogZnVuY3Rpb24oc2Vhc29uSWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvdXJjZS5nZXRUZWFtcyh7c2luZ2xlU2Vhc29uOnNlYXNvbklkfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEZpeHR1cmVzOiBmdW5jdGlvbihzZWFzb25JZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlLmdldEZpeHR1cmVzKHtzaW5nbGVTZWFzb246c2Vhc29uSWR9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0TGVhZ3VlVGFibGU6IGZ1bmN0aW9uKHNlYXNvbklkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb3VyY2UuZ2V0TGVhZ3VlVGFibGUoe3NpbmdsZVNlYXNvbjpzZWFzb25JZH0pO1xuICAgICAgICB9XG4gICAgfTtcbn0pOyIsImZvb3RiYWxsRGF0YS5mYWN0b3J5KCd0ZWFtRGV0YWlscycsIGZ1bmN0aW9uKCRyZXNvdXJjZSwgJGh0dHApIHtcbiAgICAvKipcbiAgICAgKiBodHRwOi8vYXBpLmZvb3RiYWxsLWRhdGEub3JnL3YxLyByZXNvdXJjZVxuICAgICAqIGdldCBkZXRhaWxzIG9mIGEgc2luZ2xlIHNlYXNvblxuICAgICAqL1xuICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgtVG9rZW4nXSA9IGFwaUtleTtcbiAgICB2YXIgcmVzb3VyY2UgPSAkcmVzb3VyY2UoJ2h0dHA6Ly9hcGkuZm9vdGJhbGwtZGF0YS5vcmcvdjEvdGVhbXMvOnRlYW1JZCcsXG4gICAgICAgIHt0ZWFtSWQ6J0B0ZWFtSWQnfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImdldFRlYW1cIjoge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZSA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FycmF5OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJnZXRQbGF5ZXJzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQXJyYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaHR0cDovL2FwaS5mb290YmFsbC1kYXRhLm9yZy92MS90ZWFtcy86dGVhbUlkL3BsYXllcnMnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJnZXRGaXh0dXJlc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FycmF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2h0dHA6Ly9hcGkuZm9vdGJhbGwtZGF0YS5vcmcvdjEvc29jY2Vyc2Vhc29ucy86dGVhbUlkL2ZpeHR1cmVzJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXRQbGF5ZXJzOiBmdW5jdGlvbih0ZWFtSWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvdXJjZS5nZXRQbGF5ZXJzKHt0ZWFtSWQ6dGVhbUlkfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFRlYW06IGZ1bmN0aW9uKHRlYW1JZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlLmdldFRlYW0oe3RlYW1JZDp0ZWFtSWR9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Rml4dHVyZXM6IGZ1bmN0aW9uKHRlYW1JZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlLmdldEZpeHR1cmVzKHt0ZWFtSWQ6dGVhbUlkfSk7XG4gICAgICAgIH1cbiAgICB9O1xufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
